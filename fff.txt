/* 
********************SINGLETON ***********************
    public class ClienteSingleton
    {
        private static ClienteSingleton instancia;
        private HttpClient client;

        public ClienteSingleton()
        {
            client = new HttpClient();
        }
        public static ClienteSingleton ObtenerInstancia()
        {
            if (instancia == null)
            {
                instancia = new ClienteSingleton();
            }
            return instancia;
        }
        public async Task<string> GetAsync(string url)
        {
            var result = await client.GetAsync(url);
            var content = "";
            if (result.IsSuccessStatusCode)
                content = await result.Content.ReadAsStringAsync();
            return content;
        }
        public async Task<string> PostAsync(string url, string data)
        {
            StringContent content = new StringContent(data, Encoding.UTF8,
            "application/json");
            var result = await client.PostAsync(url, content);
            var response = "";
            if (result.IsSuccessStatusCode)
                response = await result.Content.ReadAsStringAsync();
            return response;
        }
    }
}
*/
/*
************** HELPER *************************
    public class HelperDao
    {
        private static HelperDao instancia;
        private SqlConnection cnn;
        private HelperDao()
        {
            cnn = new SqlConnection(@" ");
        }
        public static HelperDao ObtenerInstancia()
        {
            if (instancia == null)
            {
                instancia = new HelperDao();
            }
            return instancia;
        }
        public SqlConnection ObtenerConexion()
        { return cnn; }
        public int EjecutarSp(string spNombre, List<Parametro> listaParametros)
        {
            int filasAfectadas = 0;
            SqlTransaction t = null;
            if (cnn != null && cnn.State == ConnectionState.Open)
                cnn.Close();
            try
            {
                cnn.Open();
                t = cnn.BeginTransaction();
                SqlCommand cmd = new SqlCommand(spNombre, cnn, t);
                cmd.CommandType = CommandType.StoredProcedure;

                if (listaParametros != null)
                {
                    foreach (Parametro oParametro in listaParametros)
                    {
                        cmd.Parameters.AddWithValue(oParametro.Nombre, oParametro.Valor);
                    }
                }
                filasAfectadas = cmd.ExecuteNonQuery();
                t.Commit();
            }
            catch (SqlException)
            {
                if (t != null)
                { t.Rollback(); }
            }
            finally
            {
                if (cnn != null && cnn.State == ConnectionState.Open)
                    cnn.Close();
            }
            return filasAfectadas;
        }
        public DataTable ConsultaTabla(string spNombre, List<Parametro> listaParametros)
        {
            DataTable dt = new DataTable();
            cnn.Open();
            SqlCommand cmd = new SqlCommand(spNombre, cnn);
            cmd.CommandType = CommandType.StoredProcedure;
            if (listaParametros != null)
            {
                foreach (Parametro oParametro in listaParametros)
                {
                    cmd.Parameters.AddWithValue(oParametro.Nombre, oParametro.Valor);
                }
            }
            dt.Load(cmd.ExecuteReader());
            cnn.Close();
            return dt;
        }
        public DataTable Consultar(string nombreSP)
        {
            cnn.Open();
            SqlCommand comando = new SqlCommand();
            comando.Connection = cnn;
            comando.CommandType = CommandType.StoredProcedure;
            comando.CommandText = nombreSP;
            DataTable tabla = new DataTable();
            tabla.Load(comando.ExecuteReader());
            cnn.Close();
            return tabla;
        }
        public int ConsultarEscalar(string nombreSP, string nombreParamOut)
        {
            cnn.Open();
            SqlCommand comando = new SqlCommand();
            comando.Connection = cnn;
            comando.CommandType = CommandType.StoredProcedure;
            comando.CommandText = nombreSP;
            SqlParameter parametro = new SqlParameter();
            parametro.ParameterName = nombreParamOut;
            parametro.SqlDbType = SqlDbType.Int;
            parametro.Direction = ParameterDirection.Output;
            comando.Parameters.Add(parametro);
            comando.ExecuteNonQuery();
            cnn.Close();
            return (int)parametro.Value;
        }

        public int ConsultaEscalarConParametros(string spNombre, string pOutNombre, List<Parametro> listaParámetros)
        {
            if (cnn != null && cnn.State == ConnectionState.Open)
                cnn.Close();
            cnn.Open();
            SqlCommand cmd = new SqlCommand(spNombre, cnn);
            cmd.CommandType = CommandType.StoredProcedure;

            if (listaParámetros != null)
            {
                foreach (Parametro oParametro in listaParámetros)
                {
                    cmd.Parameters.AddWithValue(oParametro.Nombre, oParametro.Valor);
                }
            }

            SqlParameter pOut = new SqlParameter();
            pOut.ParameterName = pOutNombre;
            pOut.DbType = DbType.Int32;
            pOut.Direction = ParameterDirection.Output;
            cmd.Parameters.Add(pOut);
            cmd.ExecuteNonQuery();
            cnn.Close();
            return (int)pOut.Value;
        }
    }
}
*/
/*
***************** PARAMETRO ****************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace CineCordobaBack.Datos
{
    public class Parametro
    {
        public string Nombre { get; set; }
        public object Valor { get; set; }
        public Parametro(string nombre, object valor)
        {
            Nombre = nombre;
            Valor = valor;
        }
    }
}
*/
/*
*****************Fabrica ***************************
Dentro de servicios crear carperta fabrica 
namespace CineCordobaBack.Servicios.Fabrica
{
    public abstract class FabricaServicio
    {
        public abstract IServicio CrearServicio();
    }
}

namespace CineCordobaBack.Servicios.Fabrica
{
    public class FabricaServicioImp : FabricaServicio
    {
        public override IServicio CrearServicio()
        {
            return new Servicio();
        }
    }
}
*/
/*
******************** Servicios **************
Crear carpetas interfaz e implenentacion dentro de servicios

Interfaz Iservicio **

    List<Barrios> ConsultarBarrios();
    List<TipoDoc> ConsultarTipo_Documento();
    bool EliminarCliente(int id_cliente);
    Clientes ConsultarClientesId(int id_cliente);
    bool ModificarClientes(Clientes clientes);
    bool CrearCliente(DtoCliente oClientes);

Servicio **

  public class Servicio : IServicio
  {
      private IDaoCliente dao;
      private IFuncionDao funcionDao;

      public Servicio()
      {
          dao = new DaoCliente();
          funcionDao = new FuncionDao();
      }
         public List<Barrios> ConsultarBarrios()
      {
          return dao.ConsultarBarrios();
      }
      public List<TipoDoc> ConsultarTipo_Documento()
      {
          return dao.ConsultarTipo_Documento();


      }

      public bool EliminarCliente(int id_cliente)
      {
          return dao.EliminarCliente(id_cliente);
      }
*/
/*
********* Daos *************
Crear carpeta fachada dentro de ella interfaces e implementaciones
Interfaces***

 List<TipoDoc> ConsultarTipo_Documento();
 Clientes ConsultarClientesId(int idCliente);
 bool EliminarCliente(int id_cliente);
 bool ModificarClientes(Clientes clientes);
  bool CrearCliente(DtoCliente oClientes);
Implementaciones***

 public class DaoCliente : IDaoCliente

       public List<Barrios> ConsultarBarrios()
       {
           SqlConnection cnn = HelperDao.ObtenerInstancia().ObtenerConexion();
           cnn.Open();
           SqlCommand cmd = new SqlCommand();
           cmd.Connection = cnn;
           cmd.CommandText = "cargarBarrios";
           cmd.CommandType = CommandType.StoredProcedure;
           DataTable dt = new DataTable();
           dt.Load(cmd.ExecuteReader());

           List<Barrios> lstb = new List<Barrios>();
           foreach (DataRow fila in dt.Rows)
           {
               int qbarrioId = Convert.ToInt32(fila[0]);
               string qnombreBarrio = fila[1].ToString();
               Barrios b = new Barrios(qbarrioId, qnombreBarrio);
               lstb.Add(b);
           }
           cnn.Close();
           return lstb;
       }
public bool EliminarCliente(int id_cliente)
{
    bool aux = false;
    string sp = "SP_ELIMINAR_CLIENTE";
    List<Parametro> lst = new List<Parametro>();
    lst.Add(new Parametro("@id_cliente", id_cliente));
    int filasAfectadas = HelperDao.ObtenerInstancia().EjecutarSp(sp, lst);
    if (filasAfectadas > 0)
    {
        aux = true;
    }
    return aux;
}
  public Clientes ConsultarClientesId(int idCliente)
  {
      List<Parametro> lstParametros = new List<Parametro>();
      Clientes Clientesq = new Clientes();
      Parametro parametroId = new Parametro("@id_cliente", idCliente);
      lstParametros.Add(parametroId);

      DataTable dt = HelperDao.ObtenerInstancia().ConsultaTabla("sp_consultar_cliente_id", lstParametros);

      foreach (DataRow dr in dt.Rows)
      {
          Clientesq.id_cliente = Convert.ToInt32(dr["id_cliente"].ToString());
          Clientesq.Nombre = dr["nombre"].ToString();
          Clientesq.Apellido = dr["apellido"].ToString();
          Clientesq.FechaNac = Convert.ToDateTime(dr["fecha_nac"].ToString());
          Clientesq.Telefono = Convert.ToInt32(dr["teléfono"].ToString());
          Clientesq.Email = dr["email"].ToString();
          Clientesq.id_barrio = Convert.ToInt32(dr["id_barrio"].ToString());
          Clientesq.Calle = dr["calle"].ToString();
          Clientesq.Altura = Convert.ToInt32(dr["altura"].ToString());
          Clientesq.id_tipo_doc = Convert.ToInt32(dr["id_tipo_doc"].ToString());
          Clientesq.NroDoc = Convert.ToInt32(dr["nro_doc"].ToString());
          break;
      }
      return Clientesq;
  }
  public bool ModificarClientes(Clientes clientes)
  {
      bool ok = true;
      SqlTransaction t = null;
      SqlConnection cnn = HelperDao.ObtenerInstancia().ObtenerConexion();
      try
      {
          cnn.Open();
          t = cnn.BeginTransaction();

          using (SqlCommand cmd = new SqlCommand())
          {
              cmd.Transaction = t;
              cmd.Connection = cnn;
              cmd.CommandText = "ModificarCliente";
              cmd.CommandType = CommandType.StoredProcedure;
              cmd.Parameters.AddWithValue("@id_cliente", clientes.id_cliente);
              cmd.Parameters.AddWithValue("@nombre", clientes.Nombre);
              cmd.Parameters.AddWithValue("@apellido", clientes.Apellido);
              cmd.Parameters.AddWithValue("@fecha_nac", clientes.FechaNac);
              cmd.Parameters.AddWithValue("@telefono", clientes.Telefono);
              cmd.Parameters.AddWithValue("@email", clientes.Email);
              cmd.Parameters.AddWithValue("@id_barrio", clientes.id_barrio);
              cmd.Parameters.AddWithValue("@calle", clientes.Calle);
              cmd.Parameters.AddWithValue("@altura", clientes.Altura);
              cmd.Parameters.AddWithValue("@id_tipo_doc", clientes.id_tipo_doc);
              cmd.Parameters.AddWithValue("@nro_doc", clientes.NroDoc);
              cmd.ExecuteNonQuery();
          }

          t.Commit();
      }
      catch (Exception ex)
      {
          Console.WriteLine($"Error al modificar Cliente: {ex.Message}");
          t?.Rollback();
          ok = false;
      }
      finally
      {
          if (cnn.State == ConnectionState.Open)
          {
              cnn.Close();
          }
      }

      return ok;
  }

public bool CrearCliente(DtoCliente oClientes) //no era con  transaccion boludin
{
    bool resultado = true;
    SqlConnection conexion = HelperDao.ObtenerInstancia().ObtenerConexion();
    try
    {
        conexion.Open();               
        SqlCommand comandoCliente = new SqlCommand("sp_insertarCliente", conexion);
        comandoCliente.CommandType = CommandType.StoredProcedure;
        comandoCliente.Parameters.AddWithValue("@nombre", oClientes.Nombre);
        comandoCliente.Parameters.AddWithValue("@apellido", oClientes.Apellido);
        comandoCliente.Parameters.AddWithValue("@fecha_nac", oClientes.FechaNac);
        comandoCliente.Parameters.AddWithValue("@telefono", oClientes.Telefono);
        comandoCliente.Parameters.AddWithValue("@email", oClientes.Email);
        comandoCliente.Parameters.AddWithValue("@id_barrio", oClientes.Barrio.Id_barrio);
        comandoCliente.Parameters.AddWithValue("@calle", oClientes.Calle);
        comandoCliente.Parameters.AddWithValue("@altura", oClientes.Altura);
        comandoCliente.Parameters.AddWithValue("@id_tipo_doc", oClientes.TipoDocId.TipoDocId);
        comandoCliente.Parameters.AddWithValue("@nro_doc", oClientes.NroDoc);
        SqlParameter param = new SqlParameter("@id_cliente", SqlDbType.Int);
        param.Direction= ParameterDirection.Output;
        comandoCliente.Parameters.Add(param);
        comandoCliente.ExecuteNonQuery();
        int ultimoID = Convert.ToInt32(param.Value); 
    }
    catch (Exception)
    { 
        resultado = false;
    }
    finally
    {
        if (conexion != null && conexion.State == ConnectionState.Open)
            conexion.Close();
    }
    return resultado;
}
}

/*

/*
************** CONTROLADOR **********************
namespace CineCordobaApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClientesController : ControllerBase
    {
        private IServicio oServicio;
        
        public ClientesController()
        {
            oServicio = new CineCordobaBack.Servicios.Implementacion.Servicio();
          
        }

        [HttpGet("/clientes")]
        public IActionResult GetClientes()
        {
            List<Clientes> lstClientes;
            try
            {
                lstClientes = oServicio.ConsultarClientes();
                return Ok(lstClientes);
            }
            catch (Exception ex)
            {
              
                return StatusCode(500, "Error interno! Intente luego.");
            }
        }

        [HttpDelete("/eliminarCliente")]
        public IActionResult DelCliente(int id_cliente)
        {
            bool eliminar;
            try
            {
                eliminar = oServicio.EliminarCliente(id_cliente);
                return Ok(eliminar);
            }
            catch (Exception)
            {
                return StatusCode(500, "Error interno! Intente luego.");
            }
        }

        [HttpGet("/clienteSegunId")]
        public IActionResult GetFacturaSegunId(int idCliente)
        {
            Clientes oCliente;
            try
            {
                oCliente = oServicio.ConsultarClientesId(idCliente);
                return Ok(oCliente);
            }
            catch (Exception)
            {
                return StatusCode(500, "Error interno! Intente luego.");
            }
        }
        [HttpPut("/modificarCliente")]
        public IActionResult Put( Clientes clientes)
        {
            if (clientes != null)
            {
                bool result = oServicio.ModificarClientes(clientes);
                return Ok(result);
            }
            else
            {
                return BadRequest("Debe ingresar un cliente valido");
            }
        }

	 [HttpPost("/AltaFuncion")]
 public IActionResult PostFuncion(CineCordobaBack.Entidades.Dto.DtoFunciones oFuncion)
 {
     try
     {
         if (oFuncion == null)
         {
             return BadRequest("Error creando la funcion");
         }
         return Ok(app.CrearFuncion(oFuncion));

     }
     catch (Exception)
     {

         return StatusCode(500, "error interno! Intente luego");
     }
 }
    }
}
*/

/*
*************************** ALTA FORM ****************************
    public partial class FrmAltaClientes : Form
    {
        IAplicacion aplicacion = null;
        private DtoCliente oCliente;

        public FrmAltaClientes()
        {
            InitializeComponent();
            oCliente = new DtoCliente();
            aplicacion = new Aplicacion();
        }

        private async void FrmAltaClientes_Load(object sender, EventArgs e)
        {
            await CargarCiudadesAsync();
            await CargarDocumentosAsync();
            await ProximoCliente();
            LimpiarCampos();
        }

        private async Task<int> ProximoCliente()
        {
            string url = "https://localhost:7055/proxCliente";
            var DataJson = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            int v = JsonConvert.DeserializeObject<int>(DataJson);
            return v;
        }

        private async Task CargarCiudadesAsync()
        {
            string url = "https://localhost:7055/traerCiudades";
            var DataJson = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            List<Ciudades> lciudad = JsonConvert.DeserializeObject<List<Ciudades>>(DataJson);

            cboCiudad.DataSource = lciudad;
            cboCiudad.ValueMember = "id_ciudad";
            cboCiudad.DisplayMember = "ciudad";
            cboCiudad.DropDownStyle = ComboBoxStyle.DropDownList;

        }

        private void cboCiudad_SelectedIndexChanged(object sender, EventArgs e)
        {
            int IdCiudadSeleccionada = Convert.ToInt32(cboCiudad.SelectedIndex + 1);
            CargarBarriosAsync(IdCiudadSeleccionada);
        }

        private async Task CargarBarriosAsync(int id)
        {
            string url = "https://localhost:7055/traerBarrios" + "?id=" + id;
            var DataJson = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            List<DtoBarrio> lbarrios = JsonConvert.DeserializeObject<List<DtoBarrio>>(DataJson);

            cboBarrio.DataSource = lbarrios;
            cboBarrio.ValueMember = "id_barrio";
            cboBarrio.DisplayMember = "NombreBarrio";
            cboBarrio.DropDownStyle = ComboBoxStyle.DropDownList;
        }


        private async void btnConfirmar_Click(object sender, EventArgs e)
        {
            if (validar())
            {
                DtoCliente cliente = new DtoCliente();

                cliente.ClienteId = await ProximoCliente();
                cliente.Nombre = txtNombre.Text;
                cliente.Apellido = txtApellido.Text;
                cliente.NroDoc = int.Parse(txtDocumento.Text);
                cliente.Email = txtCorreoElec.Text;
                cliente.Calle = txtCalle.Text;
                cliente.Altura = int.Parse(txtAltura.Text);
                cliente.FechaNac = Convert.ToDateTime(dtpFechaNac.Value);
                cliente.Telefono = int.Parse(txtTelefono.Text);
                cliente.Barrio = (DtoBarrio)cboBarrio.SelectedItem;
                cliente.TipoDocId = (DtoTipoDoc)cboTipoDoc.SelectedItem;


                if (await crearClienteAsync(cliente))
                {
                    MessageBox.Show("Se registró con éxito el cliente...", "Informe", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Dispose();
                }
                else
                {
                    MessageBox.Show("NO se pudo registrar el cliente...", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private async Task<bool> crearClienteAsync(DtoCliente cliente)
        {

            string url = "https://localhost:7055/AltaCliente";
            string FuncionJson = JsonConvert.SerializeObject(cliente);
            var DataJson = await ClienteSingleton.ObtenerInstancia().PostAsync(url, FuncionJson);
            return DataJson.Equals("true");
        }

        private bool validar()
        {
            bool v = true;

            if (string.IsNullOrEmpty(txtNombre.Text) || int.TryParse(txtNombre.Text, out _))
            {
                MessageBox.Show("Debe ingresar un nombre, que no incluya numeros", "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtNombre.Focus();
                v = false;
            }
            if (!int.TryParse(txtTelefono.Text, out _))
            {
                MessageBox.Show("El telefono solo permite numeros", "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtTelefono.Focus();
                v = false;
            }
            if (string.IsNullOrEmpty(txtAltura.Text) || !int.TryParse(txtAltura.Text, out _))
            {
                MessageBox.Show("La altura solo permite numeros", "error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtAltura.Focus();
                v = false;
            }
            return v;
        }
        private void btnCancelar_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("¿Desea Cancelar la carga de la funcion?", "Cancelar.", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.Dispose();
            }
        }
    }
}
*/
/*
****************************Consultar form ********************
    public partial class FrmConsultarCliente : Form
    {
        private IServicio servicio;
        private FabricaServicio oFabrica;

        public FrmConsultarCliente(FabricaServicio oFabrica)
        {
            InitializeComponent();

            servicio = oFabrica.CrearServicio();
            this.oFabrica = oFabrica;
        }

        private async void FrmConsultarCliente_Load(object sender, EventArgs e)
        {
            await CargarComboAsync();
        }
        private async Task CargarComboAsync()
        {
            string url = "https://localhost:7055/clientes";
            var data = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            List<Clientes> lst = JsonConvert.DeserializeObject<List<Clientes>>(data);
            cboSeleccionarCliente.DataSource = lst;
            cboSeleccionarCliente.ValueMember = "id_cliente";
            cboSeleccionarCliente.DisplayMember = "apellido";
            cboSeleccionarCliente.DropDownStyle = ComboBoxStyle.DropDownList;

        }

        private void BtnConsultar_Click(object sender, EventArgs e)
        {
            ConsultarClientes();
        }
        private void ConsultarClientes()
        {
            if (cboSeleccionarCliente.SelectedItem != null)
            {
                Clientes c = (Clientes)cboSeleccionarCliente.SelectedItem;


                foreach (DataGridViewRow fila in dgvConsultarClientes.Rows)
                {
                    if (c.id_cliente == Convert.ToInt32(fila.Cells["ColId"].Value))
                    {
                        MessageBox.Show("Ya consulto este cliente");
                        return;
                    }

                }
                int id_cliente = Convert.ToInt32(c.id_cliente);
                string nombre = c.Nombre;
                string apellido = c.Apellido;
                DateTime fecha_nacimiento = c.FechaNac;
                int telefono = c.Telefono;
                string email = c.Email;
                string calle = c.Calle;
                int altura = c.Altura;
                int nro_documento = c.NroDoc;

                dgvConsultarClientes.Rows.Add(id_cliente, nombre, apellido, fecha_nacimiento, telefono, email, calle, altura, nro_documento);
            }
            else
            {
                MessageBox.Show("No cliente selected.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }
        private async void dgvConsultarClientes_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dgvConsultarClientes.CurrentCell.ColumnIndex == 10)
            {
                int id_cliente = Convert.ToInt32(dgvConsultarClientes.CurrentRow.Cells["ColId"].Value.ToString());
                if (servicio.EliminarCliente(id_cliente))
                {
                    _ = MessageBox.Show("¿Esta seguro que quiere eliminar el cliente?", "Eliminar", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes;
                    Limpiar();
                }
                else
                {
                    MessageBox.Show("Error al eliminar el cliente.", "Error.", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            else if (dgvConsultarClientes.CurrentCell.ColumnIndex == 9)
            {
                int idq = Convert.ToInt32(dgvConsultarClientes.CurrentRow.Cells["ColId"].Value.ToString());

                new FrmModificarCliente(idq, oFabrica).ShowDialog();
            }

            Limpiar();
            await CargarComboAsync();
        }

        private void BtnSalir_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("¿Desea salir?", "Salir.", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.Dispose();
            }
        }
        public void Limpiar()
        {

            dgvConsultarClientes.Rows.Clear();
        }
    }
}
*/
/*
*************** Modificar **************************
        private IServicio oServicio;
        private FabricaServicio oFabrica;
        private Clientes oCliente;
        private int idCliente;
        public FrmModificarCliente(int id_cliente, FabricaServicio oFabrica)
        {
            InitializeComponent();
            oServicio = oFabrica.CrearServicio();
            oCliente = new Clientes();
            this.oFabrica = oFabrica;
            this.idCliente = id_cliente;
        }

        private async void FrmModificarCliente_Load(object sender, EventArgs e)
        {
            await CargarCampos();
            await cargarCombos();
            cargarNumeroCliente();
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("¿Desea Salir?", "Salir.", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.Dispose();
            }
        }
        private async Task<Clientes> ConsultarClientesId(int idCliente)
        {
            string url = "https://localhost:7055/clienteSegunId?id_cliente=" + "?idCliente=" + idCliente.ToString();
            var data = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            Clientes oCliente = JsonConvert.DeserializeObject<Clientes>(data);

            return oCliente;
        }
        public async Task CargarCampos()
        {
            Clientes oCliente = await ConsultarClientesId(this.idCliente);

            if (oCliente != null)
            {

                txtNombre.Text = oCliente.Nombre.ToString();
                txtApellido.Text = oCliente.Apellido.ToString();

                txtTelefono.Text = oCliente.Telefono.ToString();
                txtEmail.Text = oCliente.Email.ToString();
                txtCalle.Text = oCliente.Calle.ToString();
                txtAltura.Text = oCliente.Altura.ToString();
                txtDocumento.Text = oCliente.NroDoc.ToString();
                cboBarrio.SelectedIndex = Convert.ToInt32(oCliente.id_barrio.ToString()) - 1;
                cboTipoDocumento.SelectedIndex = Convert.ToInt32(oCliente.id_tipo_doc.ToString()) - 1;
            }
            else
            {
                MessageBox.Show("No se encontró el cliente");
            }
        }
        private async Task cargarCombos()
        {
            await cargarBarrios();
            await cargarTipoDocumento();
        }
        private async Task cargarBarrios()
        {
            string url = "https://localhost:7055/barrios";
            var data = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            List<Barrios> lst = JsonConvert.DeserializeObject<List<Barrios>>(data);
            cboBarrio.DataSource = lst;
            cboBarrio.ValueMember = "id_barrio";
            cboBarrio.DisplayMember = "barrio";
            cboBarrio.DropDownStyle = ComboBoxStyle.DropDownList;
        }

        private async Task cargarTipoDocumento()
        {
            string url = "https://localhost:7055/tipo_documentos";
            var data = await ClienteSingleton.ObtenerInstancia().GetAsync(url);
            List<TipoDoc> lst = JsonConvert.DeserializeObject<List<TipoDoc>>(data);
            cboTipoDocumento.DataSource = lst;
            cboTipoDocumento.ValueMember = "id_tipo_documento";
            cboTipoDocumento.DisplayMember = "TipoDocumento";
            cboTipoDocumento.DropDownStyle = ComboBoxStyle.DropDownList;

        }
        private async void BtnModificar_Click(object sender, EventArgs e)
        {
            await ModificarCliente();
        }
        private async Task ModificarCliente()
        {
            if (validar())
            {
                if (MessageBox.Show("Confirme la modificacion del cliente", "Modificación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    try
                    {
                        {
                            Clientes c = await ConsultarClientesId(idCliente);
                            int id_cliente = idCliente;
                            oCliente.id_cliente = Convert.ToInt32(id_cliente);
                            oCliente.Nombre = txtNombre.Text;
                            oCliente.Apellido = txtApellido.Text;
                            oCliente.Telefono = Convert.ToInt32(txtTelefono.Text);
                            oCliente.Email = txtEmail.Text;
                            oCliente.FechaNac = dtpFechaNacimiento.Value;
                            oCliente.id_barrio = Convert.ToInt32(cboBarrio.SelectedValue);
                            oCliente.Calle = txtCalle.Text;
                            oCliente.Altura = Convert.ToInt32(txtAltura.Text);
                            oCliente.id_tipo_doc = Convert.ToInt32(cboTipoDocumento.SelectedValue);
                            oCliente.NroDoc = Convert.ToInt32(txtDocumento.Text);

                            if (oServicio.ModificarClientes(oCliente))
                            {
                                MessageBox.Show("Se actualizó el cliente con éxito");
                            }
                            else
                            {
                                MessageBox.Show("No se pudo actualizar el cliente");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al modificar el cliente: {ex.Message}");
                    }
                }
            }
            Dispose();

        }
        private void cargarNumeroCliente()
        {
            lblClienteNro.Text = "Cliente Nro:" + " " + idCliente.ToString();
        }
    }